events {
  worker_connections 1024;
}

http {
  include  /usr/local/openresty/nginx/conf/mime.types;
  lua_package_path '/usr/local/openresty/lualib/?.lua;;';
  resolver 8.8.8.8;

  server {
    listen       {{nginx_service_port}} default_server;
    server_name  {{server_host_url}};

    root {{www_static_dir}};

    # location /auth {
    #   proxy_pass          http://{{keycloak_service_name}}:{{keycloak_service_port}}/auth;
    #   proxy_set_header    Host               $host;
    #   proxy_set_header    X-Real-IP          $remote_addr;
    #   proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
    #   proxy_set_header    X-Forwarded-Host   $host;
    #   proxy_set_header    X-Forwarded-Server $host;
    #   proxy_set_header    X-Forwarded-Port   $server_port;
    #   proxy_set_header    X-Forwarded-Proto  $scheme;
    # }

    location / {
      access_by_lua '
              local opts = {
                redirect_uri = "{{server_host_url}}/*",
                discovery = "{{server_host_url}}/auth/realms/master/.well-known/openid-configuration",
                client_id = "{{keycloak_main_client}}",
                client_secret = "{{keycloak_client_secret}}",
                ssl_verify = "no",
                redirect_uri_scheme = "https",
                logout_path = "/logout",
                redirect_after_logout_uri = "{{server_host_url}}/auth/realms/internal_applications/protocol/openid-connect/logout",
                redirect_after_logout_with_id_token_hint = false,
                session_contents = {id_token=true}
              }
              local res, err = require("resty.openidc").authenticate(opts)
              if err then
                ngx.status = 403
                ngx.say(err)
                ngx.exit(ngx.HTTP_FORBIDDEN)
              end
          ';

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_cache_bypass $http_upgrade;

      location /api/ {
        proxy_pass http://{{server_gateway_service_name}}:3000/;
      }
  
      location /swagger {
        proxy_pass http://{{server_gateway_service_name}}:3000/swagger;
      }

      location /app {
        alias {{www_static_dir}};
        # any path after /app will rewrite back to index.html
        try_files $uri @rewrites;
      }
    }

    # rewrite back to html
    location @rewrites {
        rewrite ^(.+)$ /index.html last;
    }
  }
}